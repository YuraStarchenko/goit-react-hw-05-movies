{"version":3,"file":"static/js/206.a3d7ab63.chunk.js","mappings":"6OAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,iPAeVE,EAAYF,EAAAA,GAAAA,IAAH,sBACTG,EAAYH,EAAAA,GAAAA,IAAH,sBACTI,EAAWJ,EAAAA,GAAAA,GAAH,sBACRK,EAAWL,EAAAA,GAAAA,GAAH,sB,sDC0ErB,EAhFqB,WAAO,IAAD,EACjBM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,CAAC,GAA1C,eAAOC,EAAP,KAAiBC,EAAjB,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,SAAO,UAAAH,EAASI,aAAT,eAAgBC,OAAQ,MAE9CC,EAAAA,EAAAA,YAAU,WACR,KACEC,EAAAA,EAAAA,IAAgBZ,GAASa,MAAK,SAAAC,GAAG,OAAIV,EAAYU,EAAhB,GAGlC,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACf,IAEJ,IAAIkB,EAAS,GAMb,OAFOA,EAHFf,EAASgB,YAGD,0CAAsChB,EAASgB,aADxD,iKAIF,UAAC,IAAD,YACE,UAAC1B,EAAD,CAAY2B,GAAIb,EAAOc,QAAvB,WACE,SAAC,MAAD,CAAaC,KAAK,OADpB,kBAKEC,EAAAA,EAAAA,SAAQpB,KACR,iCACE,UAACP,EAAD,YACE,gBAAK4B,IAAKN,EAAQO,IAAI,SAASC,MAAM,WACrC,UAAC7B,EAAD,YACE,0BACGM,EAASwB,MAETxB,EAASyB,eACR,kBACEC,MAAO,CACLC,QAAS,WACTC,MAAO,WAHX,cAMI5B,EAASyB,aAAaI,MAAM,EAAG,GANnC,WAWJ,wCAAgBC,KAAKC,MAA8B,GAAxB/B,EAASgC,cAAqB,QACzD,qCACA,uBAAIhC,EAASiC,YACb,mCACA,uBACGjC,EAASkC,OAAOC,OAAS,EACtBnC,EAASkC,OAAOE,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MAC9C,uCAIV,4BACE,oDACA,UAAC5C,EAAD,YACE,SAACC,EAAD,WACE,SAAC,KAAD,CAAMqB,GAAG,OAAT,qBAEF,SAACrB,EAAD,WACE,SAAC,KAAD,CAAMqB,GAAG,UAAT,2BAIJ,SAAC,EAAAuB,SAAD,WACE,SAAC,KAAD,cAOb,C","sources":["pages/Movies/MovieDetails/MovieDetails.styled.js","pages/Movies/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;\n\nexport const MovieInfo = styled.div``;\nexport const MovieText = styled.div``;\nexport const MenuList = styled.ul``;\nexport const MenuItem = styled.li``;\n","import { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport {\n  StyledLink,\n  MovieInfo,\n  MovieText,\n  MenuList,\n  MenuItem,\n} from './MovieDetails.styled.js';\nimport { HiArrowLeft } from 'react-icons/hi';\nimport { isEmpty } from 'lodash';\nimport { Container } from 'components/Container.styled.js';\nimport { useEffect, useState, Suspense } from 'react';\nimport { getDetailsMovie } from 'service/movieApi.jsx';\nimport { useRef } from 'react';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [filmInfo, setFilmInfo] = useState({});\n\n  const location = useLocation();\n  const goBack = useRef(location.state?.from || '/');\n\n  useEffect(() => {\n    try {\n      getDetailsMovie(movieId).then(res => setFilmInfo(res));\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n\n  let source = '';\n  if (!filmInfo.poster_path) {\n    source =\n      'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-38-picture-grey-c2ebdbb057f2a7614185931650f8cee23fa137b93812ccb132b9df511df1cfac.svg';\n  } else source = `https://image.tmdb.org/t/p/w500/${filmInfo.poster_path}`;\n\n  return (\n    <Container>\n      <StyledLink to={goBack.current}>\n        <HiArrowLeft size=\"15\" />\n        Go to Back\n      </StyledLink>\n\n      {!isEmpty(filmInfo) && (\n        <>\n          <MovieInfo>\n            <img src={source} alt=\"poster\" width=\"300px\" />\n            <MovieText>\n              <h1>\n                {filmInfo.title}\n\n                {filmInfo.release_date && (\n                  <span\n                    style={{\n                      padding: '0px 10px',\n                      color: '#a01d1d',\n                    }}\n                  >\n                    ({filmInfo.release_date.slice(0, 4)})\n                  </span>\n                )}\n              </h1>\n\n              <p>User score: {Math.round(filmInfo.vote_average * 10) + '%'}</p>\n              <b>Overview</b>\n              <p>{filmInfo.overview}</p>\n              <b>Genres</b>\n              <p>\n                {filmInfo.genres.length > 0\n                  ? filmInfo.genres.map(genre => genre.name).join(', ')\n                  : 'No information about genres'}\n              </p>\n            </MovieText>\n          </MovieInfo>\n          <div>\n            <h2>Additional information</h2>\n            <MenuList>\n              <MenuItem>\n                <Link to=\"cast\">Cast</Link>\n              </MenuItem>\n              <MenuItem>\n                <Link to=\"reviews\">Reviews</Link>\n              </MenuItem>\n            </MenuList>\n\n            <Suspense>\n              <Outlet />\n            </Suspense>\n          </div>\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["StyledLink","styled","Link","MovieInfo","MovieText","MenuList","MenuItem","movieId","useParams","useState","filmInfo","setFilmInfo","location","useLocation","goBack","useRef","state","from","useEffect","getDetailsMovie","then","res","error","console","log","source","poster_path","to","current","size","isEmpty","src","alt","width","title","release_date","style","padding","color","slice","Math","round","vote_average","overview","genres","length","map","genre","name","join","Suspense"],"sourceRoot":""}